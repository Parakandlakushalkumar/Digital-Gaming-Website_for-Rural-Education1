import React, { useState, useEffect } from 'react';
import { Zap, Trophy, MapPin, Sun, Wind, RotateCcw, Leaf } from 'lucide-react';

const SustainableEnergyHunt = () => {
  const [gameData] = useState({
    treasures: [
      { id: 1, name: 'Solar Collector', clue: 'Panels that capture sunlight and convert it to electricity', answer: 'PHOTOVOLTAIC', category: 'Solar', points: 20, found: false, icon: '☀️' },
      { id: 2, name: 'Wind Harvester', clue: 'Rotating blades that capture moving air for power', answer: 'TURBINE', category: 'Wind', points: 15, found: false, icon: '💨' },
      { id: 3, name: 'Earth Power', clue: 'Energy from hot springs and underground heat', answer: 'GEOTHERMAL', category: 'Earth', points: 18, found: false, icon: '🌋' },
      { id: 4, name: 'Water Force', clue: 'Power generated by flowing or falling water', answer: 'HYDROELECTRIC', category: 'Water', points: 16, found: false, icon: '💧' },
      { id: 5, name: 'Plant Energy', clue: 'Fuel made from organic materials like wood and crops', answer: 'BIOMASS', category: 'Bio', points: 14, found: false, icon: '🌾' },
      { id: 6, name: 'Power Storage', clue: 'Device that stores renewable energy for later use', answer: 'BATTERY', category: 'Storage', points: 12, found: false, icon: '🔋' },
      { id: 7, name: 'Smart Network', clue: 'Intelligent electricity distribution system', answer: 'SMARTGRID', category: 'Tech', points: 22, found: false, icon: '⚡' },
      { id: 8, name: 'Green Goal', clue: 'Having no net carbon dioxide emissions', answer: 'CARBON-NEUTRAL', category: 'Environment', points: 25, found: false, icon: '🌱' }
    ],
    locations: [
      { name: 'Solar Farm', description: 'Fields of solar panels stretching to the horizon' },
      { name: 'Wind Park', description: 'Majestic turbines spinning in the breeze' },
      { name: 'Hydro Dam', description: 'Powerful water rushing through generators' },
      { name: 'Geothermal Plant', description: 'Steam rising from underground heat' },
      { name: 'Biomass Facility', description: 'Converting organic waste to clean energy' },
      { name: 'Battery Farm', description: 'Massive storage systems for renewable power' },
      { name: 'Smart City', description: 'Advanced grid managing clean energy flow' },
      { name: 'Green Campus', description: 'Carbon-neutral buildings and systems' }
    ],
    ecoFacts: [
      "Solar energy is the most abundant energy resource on Earth!",
      "One wind turbine can power about 500 homes per year.",
      "Geothermal energy is available 24/7, unlike solar and wind.",
      "Hydroelectric power provides about 16% of world's electricity.",
      "Biomass is carbon-neutral because plants absorb CO2 as they grow.",
      "Modern batteries can store renewable energy for months.",
      "Smart grids reduce energy waste by up to 30%.",
      "Going carbon-neutral helps fight climate change!"
    ]
  });

  const [treasures, setTreasures] = useState(gameData.treasures);
  const [currentClue, setCurrentClue] = useState(0);
  const [playerAnswer, setPlayerAnswer] = useState('');
  const [score, setScore] = useState(0);
  const [gameComplete, setGameComplete] = useState(false);
  const [foundTreasures, setFoundTreasures] = useState([]);
  const [showEcoFact, setShowEcoFact] = useState(false);
  const [currentLocation, setCurrentLocation] = useState(0);
  const [energyPoints, setEnergyPoints] = useState(100);
  const [wrongAttempts, setWrongAttempts] = useState(0);
  const [gameMessages, setGameMessages] = useState([]);

  const initializeGame = () => {
    setTreasures(gameData.treasures.map(t => ({ ...t, found: false })));
    setCurrentClue(0);
    setPlayerAnswer('');
    setScore(0);
    setGameComplete(false);
    setFoundTreasures([]);
    setShowEcoFact(false);
    setCurrentLocation(0);
    setEnergyPoints(100);
    setWrongAttempts(0);
    setGameMessages([]);
  };

  useEffect(() => {
    initializeGame();
  }, []);

  const addMessage = (text, type = 'info') => {
    const message = { id: Date.now(), text, type };
    setGameMessages(prev => [message, ...prev.slice(0, 2)]);
    setTimeout(() => {
      setGameMessages(prev => prev.filter(m => m.id !== message.id));
    }, 3000);
  };

  const handleSubmitAnswer = () => {
    if (!playerAnswer.trim()) {
      addMessage('Please enter an answer!', 'warning');
      return;
    }

    const currentTreasure = treasures[currentClue];
    const userAnswer = playerAnswer.toUpperCase().replace(/\s+/g, '').replace(/-/g, '');
    const correctAnswer = currentTreasure.answer.toUpperCase().replace(/\s+/g, '').replace(/-/g, '');
    const isCorrect = userAnswer === correctAnswer;

    if (isCorrect) {
      const updatedTreasures = treasures.map(treasure =>
        treasure.id === currentTreasure.id
          ? { ...treasure, found: true }
          : treasure
      );
      
      setTreasures(updatedTreasures);
      setFoundTreasures(prev => [...prev, currentTreasure]);
      setScore(prev => prev + currentTreasure.points);
      setEnergyPoints(prev => Math.min(100, prev + 10));
      setPlayerAnswer('');
      setWrongAttempts(0);
      
      addMessage(`🎉 Found ${currentTreasure.name}! +${currentTreasure.points} points`, 'success');
      setShowEcoFact(true);

      // Check if game complete
      if (foundTreasures.length + 1 === treasures.length) {
        setGameComplete(true);
        addMessage('🌍 All treasures found! You are a Sustainable Energy Champion!', 'success');
      } else {
        // Move to next location and unfound treasure
        setCurrentLocation(prev => (prev + 1) % gameData.locations.length);
        setTimeout(() => {
          const nextClueIndex = treasures.findIndex((t, index) => 
            index > currentClue && !updatedTreasures[index].found
          );
          if (nextClueIndex !== -1) {
            setCurrentClue(nextClueIndex);
          } else {
            const firstUnfound = treasures.findIndex(t => !updatedTreasures[t.id - 1].found);
            setCurrentClue(firstUnfound);
          }
          setShowEcoFact(false);
        }, 3000);
      }
    } else {
      setWrongAttempts(prev => prev + 1);
      setEnergyPoints(prev => Math.max(0, prev - 5));
      addMessage('❌ Incorrect! Your energy is draining...', 'error');
      
      if (wrongAttempts >= 3) {
        addMessage('💡 Hint: Think about the key technology mentioned!', 'info');
      }
    }
  };

  const useEnergyBoost = () => {
    if (energyPoints >= 20) {
      setEnergyPoints(prev => prev - 20);
      const currentTreasure = treasures[currentClue];
      const firstLetter = currentTreasure.answer[0];
      setPlayerAnswer(firstLetter);
      addMessage(`⚡ Energy boost used! First letter: ${firstLetter}`, 'info');
    }
  };

  const getCurrentTreasure = () => treasures[currentClue];
  const getCurrentLocation = () => gameData.locations[currentLocation];

  const getCategoryColor = (category) => {
    const colors = {
      'Solar': 'bg-yellow-100 text-yellow-800',
      'Wind': 'bg-blue-100 text-blue-800',
      'Water': 'bg-cyan-100 text-cyan-800',
      'Earth': 'bg-orange-100 text-orange-800',
      'Bio': 'bg-green-100 text-green-800',
      'Storage': 'bg-purple-100 text-purple-800',
      'Tech': 'bg-indigo-100 text-indigo-800',
      'Environment': 'bg-emerald-100 text-emerald-800'
    };
    return colors[category] || 'bg-gray-100 text-gray-800';
  };

  const getEnergyColor = () => {
    if (energyPoints > 60) return 'bg-green-500';
    if (energyPoints > 30) return 'bg-yellow-500';
    return 'bg-red-500';
  };

  return (
    <div className="max-w-7xl mx-auto p-6 bg-gradient-to-br from-green-50 to-blue-50 min-h-screen">
      <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <Leaf className="w-8 h-8 text-green-600" />
            <h1 className="text-2xl font-bold text-gray-800">Sustainable Energy Hunt</h1>
          </div>
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2 bg-green-100 px-3 py-2 rounded-lg">
              <Trophy className="w-5 h-5 text-green-600" />
              <span className="font-semibold text-green-600">Score: {score}</span>
            </div>
            <div className="flex items-center gap-2 bg-yellow-100 px-3 py-2 rounded-lg">
              <Zap className="w-5 h-5 text-yellow-600" />
              <span className="font-semibold text-yellow-600">Energy: {energyPoints}%</span>
            </div>
            <button
              onClick={initializeGame}
              className="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
            >
              <RotateCcw className="w-4 h-4" />
              Reset Hunt
            </button>
          </div>
        </div>

        {/* Energy Bar */}
        <div className="mb-6">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-gray-700">Energy Level</span>
            <span className="text-sm text-gray-600">{energyPoints}/100</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-3">
            <div
              className={`h-3 rounded-full transition-all duration-500 ${getEnergyColor()}`}
              style={{ width: `${energyPoints}%` }}
            />
          </div>
        </div>

        {/* Game Messages */}
        {gameMessages.length > 0 && (
          <div className="mb-6 space-y-2">
            {gameMessages.map(message => (
              <div
                key={message.id}
                className={`p-3 rounded-lg animate-bounce ${
                  message.type === 'success' ? 'bg-green-100 text-green-800' :
                  message.type === 'error' ? 'bg-red-100 text-red-800' :
                  message.type === 'warning' ? 'bg-yellow-100 text-yellow-800' :
                  'bg-blue-100 text-blue-800'
                }`}
              >
                {message.text}
              </div>
            ))}
          </div>
        )}

        {/* Current Location */}
        <div className="bg-gradient-to-r from-green-400 to-blue-400 text-white p-4 rounded-lg mb-6">
          <div className="flex items-center gap-2 mb-2">
            <MapPin className="w-5 h-5" />
            <span className="font-semibold">Current Location:</span>
          </div>
          <h3 className="text-xl font-bold">{getCurrentLocation().name}</h3>
          <p className="opacity-90">{getCurrentLocation().description}</p>
        </div>
      </div>

      {!gameComplete ? (
        <div className="grid lg:grid-cols-3 gap-6">
          {/* Main Hunt Area */}
          <div className="lg:col-span-2 bg-white rounded-xl shadow-lg p-6">
            {!showEcoFact ? (
              <div className="text-center">
                <div className="text-6xl mb-4">{getCurrentTreasure().icon}</div>
                <div className="flex items-center justify-center gap-2 mb-4">
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${getCategoryColor(getCurrentTreasure().category)}`}>
                    {getCurrentTreasure().category}
                  </span>
                </div>
                
                <h2 className="text-2xl font-bold text-gray-800 mb-4">{getCurrentTreasure().name}</h2>
                
                <div className="bg-gradient-to-r from-green-500 to-blue-500 text-white p-6 rounded-lg mb-6">
                  <p className="text-lg mb-3">{getCurrentTreasure().clue}</p>
                  <div className="flex items-center justify-center gap-2">
                    <Zap className="w-4 h-4" />
                    <span className="text-sm">Worth {getCurrentTreasure().points} points</span>
                  </div>
                </div>

                <div className="space-y-4">
                  <input
                    type="text"
                    value={playerAnswer}
                    onChange={(e) => setPlayerAnswer(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleSubmitAnswer()}
                    placeholder="Enter your answer..."
                    className="w-full p-4 text-lg border-2 border-gray-300 rounded-lg focus:border-green-500 focus:outline-none"
                  />

                  <div className="flex gap-3 justify-center">
                    <button
                      onClick={handleSubmitAnswer}
                      className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors font-medium"
                    >
                      Submit Answer
                    </button>
                    <button
                      onClick={useEnergyBoost}
                      disabled={energyPoints < 20}
                      className="bg-yellow-600 text-white px-6 py-3 rounded-lg hover:bg-yellow-700 transition-colors font-medium disabled:opacity-50"
                    >
                      Energy Boost (20%)
                    </button>
                  </div>

                  {wrongAttempts >= 3 && (
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                      <div className="flex items-center gap-2 mb-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                        <span className="font-medium text-blue-800">Hint</span>
                      </div>
                      <p className="text-blue-700">Think about the main technology or concept described in the clue!</p>
                    </div>
                  )}
                </div>
              </div>
            ) : (
              <div className="text-center">
                <div className="text-6xl mb-4">🌱</div>
                <h2 className="text-2xl font-bold text-green-800 mb-4">Eco-Fact Discovered!</h2>
                <div className="bg-green-100 p-6 rounded-lg">
                  <p className="text-green-800 text-lg">
                    {gameData.ecoFacts[foundTreasures.length - 1]}
                  </p>
                </div>
                <p className="text-gray-600 mt-4">Moving to next location...</p>
              </div>
            )}
          </div>

          {/* Treasure Map & Status */}
          <div className="space-y-6">
            {/* Found Treasures */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-xl font-bold text-gray-800 mb-4">Energy Collection</h2>
              <div className="space-y-3">
                {treasures.map((treasure, index) => (
                  <div
                    key={treasure.id}
                    className={`p-3 rounded-lg border-2 transition-all ${
                      treasure.found
                        ? 'border-green-400 bg-green-50'
                        : index === currentClue
                        ? 'border-blue-400 bg-blue-50'
                        : 'border-gray-200 bg-gray-50'
                    }`}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <span className="text-lg">{treasure.icon}</span>
                        <div>
                          <h3 className="font-semibold text-gray-800 text-sm">
                            {treasure.found ? '✅' : index === currentClue ? '🎯' : '🔍'} {treasure.name}
                          </h3>
                          <p className="text-xs text-gray-600">{treasure.category}</p>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="font-bold text-green-600 text-sm">{treasure.points}pts</div>
                        {treasure.found && <div className="text-xs text-green-600">Found!</div>}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Energy Stats */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-xl font-bold text-gray-800 mb-4">Energy Stats</h2>
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-gray-700">Treasures Found:</span>
                  <span className="font-bold text-green-600">{foundTreasures.length}/{treasures.length}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-gray-700">Current Score:</span>
                  <span className="font-bold text-blue-600">{score} points</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-gray-700">Energy Level:</span>
                  <span className={`font-bold ${energyPoints > 50 ? 'text-green-600' : 'text-red-600'}`}>
                    {energyPoints}%
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-gray-700">Wrong Attempts:</span>
                  <span className="font-bold text-red-600">{wrongAttempts}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      ) : (
        <div className="bg-white rounded-xl shadow-lg p-8 text-center">
          <div className="text-6xl mb-4">🌍</div>
          <Trophy className="w-16 h-16 text-green-500 mx-auto mb-4" />
          <h2 className="text-3xl font-bold text-gray-800 mb-4">🎉 Energy Hunt Complete!</h2>
          <p className="text-xl text-gray-600 mb-6">
            You've mastered sustainable energy and found all {treasures.length} energy treasures!
          </p>
          <div className="bg-gradient-to-r from-green-500 to-blue-500 text-white p-6 rounded-lg mb-6">
            <div className="text-4xl font-bold mb-2">Final Score: {score}</div>
            <div className="text-lg opacity-90">Sustainable Energy Champion!</div>
            <div className="text-sm mt-2">You're ready to power a greener future! 🌱</div>
          </div>
          <button
            onClick={initializeGame}
            className="bg-green-600 text-white px-8 py-3 rounded-lg hover:bg-green-700 transition-colors font-medium"
          >
            Start New Energy Hunt
          </button>
        </div>
      )}
    </div>
  );
};

export default SustainableEnergyHunt;